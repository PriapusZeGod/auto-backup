#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

primaryDirectory="$HOME/Documents"
secondaryDirectory="$HOME/Backups"
logDirectory="$secondaryDirectory/Logs"
today=$(date +"%Y-%m-%d-%H-%M-%S")
nameArchive="$secondaryDirectory/${today}-Backup-Documents"
nameFile="$logDirectory/$today.log"

# Function: Check if primary directory exists
check_Primary_Directory_Exists() {
  if [ -d "$primaryDirectory" ]; then
    echo "Documents directory FOUND, commencing backup.."
  else
    echo "Documents directory NOT FOUND, aborting backup..." 1>&2
    exit 1
  fi
}

# Function: Check if primary directory is empty
check_Directory_Empty() {
  if [ -z "$(find "$1" -mindepth 1 -print -quit)" ]; then
    echo "$1 directory is EMPTY, aborting backup..." 1>&2
    exit 1
  fi
}

# Function: Check/create secondary and Logs directories
check_Secondary_Directory_Exists() {
  if [ -d "$secondaryDirectory" ]; then
    echo "Backups directory FOUND, continuing backup..."
  else
    echo "Backups directory NOT FOUND, creating it..."
    mkdir -p "$secondaryDirectory"
    echo "Backups directory was created, continuing backup..."
  fi

  if [ ! -d "$logDirectory" ]; then
    echo "Logs directory NOT FOUND, creating it..."
    mkdir -p "$logDirectory"
    echo "Logs directory was created."
  fi
}

# Function: Archive the primary directory
archive_backup() {
  if tar -czvf "$nameArchive.tar.gz" -C "$primaryDirectory" .; then
    echo "Backup created at: $nameArchive.tar.gz"
  else
    echo "Error during creation" 1>&2
    exit 1;
  fi
}

# Check if space available for backup
check_space_archieve() {
  # Get estimated size in kilobytes
  estimated_size_kb=$(du -sk "$primaryDirectory" | cut -f1)

  # Get available space in kilobytes on the destination filesystem
  available_space_kb=$(df -k "$secondaryDirectory" | awk 'NR==2 {print $4}')

  # Add a safety margin (e.g., 10%)
  safety_margin_kb=$((estimated_size_kb / 10))
  required_space_kb=$((estimated_size_kb + safety_margin_kb))

  # Check if there's enough space
  if [ "$available_space_kb" -lt "$required_space_kb" ]; then
    echo "Not enough disk space to perform backup!"
    echo "Required: $required_space_kb KB, Available: $available_space_kb KB" 1>&2
    exit 1
  fi
}

# Function: Write the log
log_setup() {
cat <<- _EOF_
Greetings, $USER
Starting Backup Script...

Directory to be Backed up: $primaryDirectory
Storage Directory for backup: $secondaryDirectory
Backup file created at: $nameArchive.tar.gz
Log saved to: $nameFile

_EOF_
}

#-------Script Execution-------

# Checks
check_Primary_Directory_Exists
check_Directory_Empty "$primaryDirectory"
check_Secondary_Directory_Exists

# Archive the directory
archive_backup

# Write to log file
log_setup > "$nameFile"

echo "Backup process complete. Log saved to $nameFile"

